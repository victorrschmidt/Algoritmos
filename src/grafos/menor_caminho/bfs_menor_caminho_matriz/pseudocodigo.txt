// --------------------------------------------------------------------------------
// BREADTH-FIRST SEARCH - MENOR CAMINHO EM UMA MATRIZ
// --------------------------------------------------------------------------------

L = 6;  // Quantidade de linhas da matriz de exemplo
C = 8;  // Quantidade de colunas da matriz de exemplo

matriz = [  // Matriz de exemplo
    ['C','.','#','.','.','.','.','#'],
    ['.','.','.','.','#','#','#','.'],
    ['.','#','.','.','.','#','.','.'],
    ['#','.','.','#','.','#','F','#'],
    ['.','.','#','#','.','.','.','.'],
    ['#','.','.','.','.','.','.','#']
];

i0 = 0;  // Posição inicial i (linha)
j0 = 0;  // Posição inicial j (coluna)

funcao bfs() {
    vi[] = [-1,0,1,0];  // Variação de valores da posição i (linha)
    vj[] = [0,1,0,-1];  // Variação de valores da posição j (coluna)

    visitado[L][C] = [[false, ..., false], ..., [false, ... false]];  // Matriz de células visitadas (array de tamanho L, contendo arrays de tamanho C que contém false)
    visitado[i0][j0] = true;  // Definir a célula inicial como visitada

    fila = [];  // Fila para verificar cada célula adjacente na matriz
    fila.push([i0, j0]);  // Adicionar a célula inicial na fila ( [i, j] )

    c_restantes = 1;  // Células restantes na camada de busca (inicialmente só com a célula inicial). Será utilizado para determinar o número de células em cada camada de busca
    distancia = 0;  // Contador de distância até a célula final

    while (fila.tamanho > 0) {  // Iteração para cada célula na fila
        [i, j] = fila[0];  // Pegar a posição i (linha) da célula e a posição j (coluna) da célula
        fila.pop();  // Remover a célula da fila (elemento mais antigo)

        if (matriz[i][j] == 'F') {  // Se essa célula é a célula final
            return distancia;  // Retornar a distância
        }

        for (k = 0; k < 4; k++) {  // Iteração para cada célula adjacente à célula que está sendo visitada
            iv = i + vi[k];  // Posição i (linha) da célula a ser visitada
            jv = j + vj[k];  // Posição j (coluna) da célula a ser visitada

            if (iv < 0 or jv < 0) continue;  // Se as posições i ou j da célula não estão na matriz (saíram dos limites da matriz, menores que 0)
            if (iv >= L or jv >= C) continue;  // Se as posições i ou j da célula não estão na matriz (saíram dos limites da matriz, maiores que o tamanho da matriz)
            if (visitado[iv][jv]) continue;  // Se a célula já foi visitada
            if (matriz[iv][jv] == '#') continue;  // Se a célula é inacessível (pedra)

            // Se qualquer uma das condições acima for verdadeira, a iteração reinicia

            fila.push([iv, jv]);  // Adicionar a célula à fila
            visitado[iv][jv] = true;  // Agora visitamos essa célula
        }

        c_restantes--;  // Diminuir o número de células na camada de busca

        if (c_restantes == 0) {  // Se foram verificadas todas as células nessa camada de busca
            c_restantes = fila.tamanho;  // A próxima camada de busca tem todas as células na próxima camada (tamanho atual da fila)
            distancia++;  // Como teremos que verificar outra camada de busca, a distância aumenta em 1
        }

    }

    return -1;  // Não existe caminho possível entre a célula inicial e final
}
