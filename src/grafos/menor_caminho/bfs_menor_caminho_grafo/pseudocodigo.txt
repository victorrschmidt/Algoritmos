# --------------------------------------------------------------------------------
# BREADTH FIRST SEARCH - MENOR CAMINHO EM UM GRAFO NÃO VALORADO
# --------------------------------------------------------------------------------

# Complexidade: O(V+E)
#
# - Onde V e E são, respectivamente, a quantidade de vértices e arestas do grafo.

# A ideia do algoritmo é visitar todos os vértices adjacentes ao vértice de origem,
# depois visitar todos os vértices adjacentes a esses e assim sucessivamente.
# Cada camada de busca corresponde a um movimento - a distância mínima possível
# entre o vértice que está sendo visitado e o vértice de origem.

# Assim, é possível determinar a menor distância entre o vértice de origem e 
# todos os outros vértices do grafo (considerando que cada aresta tem peso 1). 
# A distância do vértice de origem até cada um dos vértices será armazenada 
# no array dist[]. Como inicialmente não sabemos a distância até cada vértice,
# iremos definir todas as distâncias como -1. Conforme fazemos a travessia 
# no grafo, armazenamos a distância até o vértice u em dist[u] (onde u é o número do vértice).

# No final, teremos o array definido com todas as distâncias e, as distâncias 
# que estiverem ainda como -1 indicam que aquele vértice não é conexo 
# com o vértice de origem. Assim, podemos verificar a menor distância entre 
# o vértice de origem e qualquer outro vértice do grafo em tempo constante.

# O grafo utilizado de exemplo está no mesmo diretório deste arquivo.


VERT = 13;

grafo = [
    [6,7],
    [7,4,12],
    [3,6,8],
    [5,6,2],
    [1,8],
    [3],
    [0,3,2],
    [0,1],
    [2,9,4],
    [8,10],
    [9,11],
    [10,12],
    [1,11]
];
dist = [];  # Tamanho = VERT

# Função bfs
funcao bfs(origem) {
    dist.preencher(-1);
    dist[origem] = 0;

    visitado = [false, ..., false];  # Tamanho = VERT
    visitado[origem] = true;

    fila = [];
    fila.push(origem);

    v_restantes = 1;
    distancia = 1;

    while (fila.tamanho > 0) {
        v = fila[0];
        fila.pop();  # Remover elemento mais antigo

        for (u em grafo[v]) {
            if (!visitado[u]) {
                visitado[u] = true;
                fila.push(u);
                dist[u] = distancia;
            }
        }

        v_restantes--;
        
        if (v_restantes == 0) {
            v_restantes = fila.tamanho;
            distancia++;
        }

    }

}