// --------------------------------------------------------------------------------
// BREADTH-FIRST SEARCH - MENOR CAMINHO EM UM GRAFO NÃO VALORADO
// --------------------------------------------------------------------------------

V = 13;  // Número de vértices do grafo de exemplo

adj = [  // Lista de adjacências do grafo de exemplo
    [6,7],  // 0->6, 0->7
    [7,4,12],  // 1->7, 1->4, 1->12
    [3,6,8],  // 2->3, 2->6, 2->8
    [5,6,2],  // ...
    [1,8],
    [3],
    [0,3,2],
    [0,1],
    [2,9,4],
    [8,10],
    [9,11],
    [10,12],
    [1,11]
];

dist[V];  // Array para armazenar a distância do vértice de origem até os outros vértices

funcao bfs(origem) {
    dist.preencher(-1);  // Definir a distância até os outros vértices como -1
    dist[origem] = 0;  // A distância entre a origem e a própria origem é 0

    visitado[V] = [false, ..., false];  // Array de vértices visitados (todos os elementos inicializados como false)
    visitado[origem] = true;  // Definir o vértice de origem como 'visitado'

    fila = [];  // Fila para verificar as adjacências de cada vértice processado
    fila.push(origem);  // Adicionar o vértice de origem à fila

    while (fila.tamanho > 0) {  // Iteração para cada vértice na fila
        u = fila.front();  // Pegar o último vértice
        fila.pop();  // Removê-lo da fila

        for (v in adj[u]) {  // Iteração para cada vértice adjacente à u
            if (!visitado[v]) {  // Se o vértice v ainda não foi visitado
                visitado[v] = true;  // Definir o vértice como 'visitado'
                fila.push(v);  // Adicioná-lo à fila
                dist[v] = dist[u] + 1;  // Definir a distância até esse vértice (distância até o vértice u + 1)
            }
        }
    }
}
