// --------------------------------------------------------------------------------
// BREADTH FIRST SEARCH - MENOR CAMINHO EM UM GRAFO NÃO VALORADO
// --------------------------------------------------------------------------------

V = 13;  // Número de vértices do grafo de exemplo

adj = [  // Lista de adjacências do grafo de exemplo
    [6,7],  // 0 se liga com 6 e 7
    [7,4,12],  // 1 se liga com 7, 4 e 12
    [3,6,8],  // 2 se liga com 3, 6 e 8
    [5,6,2],  // ...
    [1,8],
    [3],
    [0,3,2],
    [0,1],
    [2,9,4],
    [8,10],
    [9,11],
    [10,12],
    [1,11]
];

dist = [];  // Array para armazenar a distância do vértice de origem até os outros vértices (tamanho = V)

funcao bfs(origem) {
    dist.preencher(-1);  // Definimos a distância até os outros vértices como -1
    dist[origem] = 0;  // A distância da origem até a própria origem é 0

    visitado = [false, ..., false];  // Array de vértices visitados (todos os elementos inicializados como false, tamanho = V)
    visitado[origem] = true;  // Definir o vértice de origem como 'visitado'

    fila = [];  // Fila para verificar as adjacências de cada vértice explorado
    fila.push(origem);  // Adicionar o vértice de origem à fila

    while (fila.tamanho > 0) {  // Iteração para cada vértice na fila
        v = fila[0];  // Pegar o último vértice
        fila.pop();  // Removê-lo da fila

        for (u in adj[v]) {  // Iteração para cada vértice adjacente à v
            if (!visitado[u]) {  // Se o vértice u ainda não foi visitado
                visitado[u] = true;  // Agora visitamos esse vértice
                fila.push(u);  // Adicioná-lo à fila
                dist[u] = dist[v]+1;  // Definir a distância até esse vértice (distância até o vértice anterior + 1)
            }
        }
    }

}
